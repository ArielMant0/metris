doctype html
html(lang='en')
    head
        title Metris
        meta(charset='utf-8')

        link(rel='stylesheet', href='style.css')

        script(src='/socket.io/socket.io.js', type='text/javascript')
        script(src='jquery-3.2.1.min.js', type='text/javascript')
        script(src='client.js', type='text/javascript')

        script(src="sylvester.js", type="text/javascript")
        script(src='glUtils.js', type='text/javascript')
        script(src='webgl2.js', type='text/javascript')
        script(src='utility.js', type='text/javascript')

        script(id='shader-fs', type='x-shader/x-fragment').
            varying highp vec2 vTextureCoord;
            varying highp vec3 vLighting;

            uniform sampler2D uSampler;

            void main(void) {
                highp vec4 texelColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));

                gl_FragColor = vec4(texelColor.rgb * vLighting, texelColor.a);
            }

        script(id='shader-vs', type='x-shader/x-vertex').
            attribute highp vec3 aVertexNormal;
            attribute highp vec3 aVertexPosition;
            attribute highp vec2 aTextureCoord;

            uniform highp mat4 uNormalMatrix;
            uniform highp mat4 uMVMatrix;
            uniform highp mat4 uPMatrix;

            varying highp vec2 vTextureCoord;
            varying highp vec3 vLighting;

            void main(void) {
                gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
                vTextureCoord = aTextureCoord;

                // Apply lighting effect

                highp vec3 ambientLight = vec3(0.6, 0.6, 0.6);
                highp vec3 directionalLightColor = vec3(0.5, 0.5, 0.75);
                highp vec3 directionalVector = vec3(0.85, 0.8, 0.75);

                highp vec4 transformedNormal = uNormalMatrix * vec4(aVertexNormal, 1.0);

                highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);
                vLighting = ambientLight + (directionalLightColor * directional);
            }

        script(id="vs-emit", type="x-shader/x-vertex").
            #version 300 es
            #define OFFSET_LOCATION 0
            #define ROTATION_LOCATION 1

            #define M_2PI 6.28318530718

            // We simulate the wandering of agents using transform feedback in this vertex shader
            // The simulation goes like this:
            // Assume there's a circle in front of the agent whose radius is WANDER_CIRCLE_R
            // the origin of which has a offset to the agent's pivot point, which is WANDER_CIRCLE_OFFSET
            // Each frame we pick a random point on this circle
            // And the agent moves MOVE_DELTA toward this target point
            // We also record the rotation facing this target point, so it will be the base rotation
            // for our next frame, which means the WANDER_CIRCLE_OFFSET vector will be on this direction
            // Thus we fake a smooth wandering behavior

            #define MAP_HALF_LENGTH 1.01
            #define WANDER_CIRCLE_R 0.01
            #define WANDER_CIRCLE_OFFSET 0.04
            #define MOVE_DELTA 0.001

            precision highp float;
            precision highp int;

            uniform float u_time;
            uniform int u_level;

            layout(location = OFFSET_LOCATION) in vec2 a_offset;
            layout(location = ROTATION_LOCATION) in float a_rotation;

            out vec2 v_offset;
            out float v_rotation;

            float rand(vec2 co)
            {
                return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);
            }

            void main()
            {
                // lässt alles nach links wandern
                //float theta = M_2PI *a_rotation;
                // Für kreis/normal
                //float theta = M_2PI * rand(vec2(u_time, a_rotation + a_offset.x + a_offset.y));

                float cos_r = cos(a_rotation);
                float sin_r = sin(a_rotation);
                mat2 rot = mat2(
                    cos_r, sin_r,
                    -sin_r, cos_r
                );

                //vec2 p = WANDER_CIRCLE_R * vec2(cos(theta), sin(theta)) + vec2(WANDER_CIRCLE_OFFSET, 0.0);
                vec2 p = vec2(1.0, 0.0);
                vec2 move = normalize(rot * p);
                v_rotation = a_rotation;//atan(move.y, move.x);

                v_offset = a_offset + MOVE_DELTA * move;

                if (u_level == 1) {
                    if (sqrt(pow(v_offset.x, 2.0) + pow(v_offset.y, 2.0)) >= 1.35) {
                        v_offset = vec2 (0.0, 0.0);
                        //v_rotation -= M_2PI;
                    }
                } else if (u_level == 2) {
                    // wrapping at edges
                    v_offset = vec2 (
                        v_offset.x > MAP_HALF_LENGTH ? - MAP_HALF_LENGTH : ( v_offset.x < - MAP_HALF_LENGTH ? MAP_HALF_LENGTH : v_offset.x ) ,
                        v_offset.y > MAP_HALF_LENGTH ? - MAP_HALF_LENGTH : ( v_offset.y < - MAP_HALF_LENGTH ? MAP_HALF_LENGTH : v_offset.y )
                    );
                } else if (u_level == 3) {
                    float num = rand(vec2(u_time, a_rotation + a_offset.x + a_offset.y)) * 1350.0;
                    if (sqrt(pow(v_offset.x, 2.0) + pow(v_offset.y, 2.0)) >= num) {
                        v_offset = vec2 (0.0, 0.0);
                    }
                } else if (u_level == 4) {
                    if (v_offset.y < -1.0) {
                        v_offset = vec2 (v_offset.x, v_offset.y + 2.0);
                    }
                }


                gl_Position = vec4(v_offset, 1.0, 1.0);
            }

        script(id="fs-emit", type="x-shader/x-fragment").
            #version 300 es
            precision highp float;
            precision highp int;

            void main()
            {
            }

        script(id="vs-draw", type="x-shader/x-vertex").
            #version 300 es
            #define OFFSET_LOCATION 0
            #define ROTATION_LOCATION 1
            #define POSITION_LOCATION 2
            #define COLOR_LOCATION 3

            precision highp float;
            precision highp int;

            layout(location = POSITION_LOCATION) in vec2 a_position;
            layout(location = ROTATION_LOCATION) in float a_rotation;
            layout(location = OFFSET_LOCATION) in vec2 a_offset;
            layout(location = COLOR_LOCATION) in vec3 a_color;

            out vec3 v_color;

            void main()
            {
                v_color = a_color;

                float cos_r = cos(a_rotation);
                float sin_r = sin(a_rotation);
                mat2 rot = mat2(
                    cos_r, sin_r,
                    -sin_r, cos_r
                );
                gl_Position = vec4(rot * a_position + a_offset, 1.0, 1.0);
            }

        script(id="fs-draw", type="x-shader/x-fragment").
            #version 300 es
            #define ALPHA 0.9

            precision highp float;
            precision highp int;

            in vec3 v_color;

            out vec4 color;

            void main()
            {
                color = vec4(v_color * ALPHA, ALPHA);
            }
    body
        nav(id='topnav')
            ul(id='nav-list')
                li
                    a(class='active', id='get-lobbies', href='#') Lobbies
                li
                    a(href='#', id='get-scores') Highscores
                li
                    a(href='#', id='get-controls') Controls
                li
                    a(href='#', id='get-game') Game
            div(id='player-info')
                span(id='player-name')
                button(id='login-button') Login
        section
            div(class='modal', id='login-modal')
                div(class='modal-content')
                    span(class='close' id='close-login-modal') &times;
                    input(type='text', id='login-name', required, placeholder='Your Username')
                    br
                    button(type='submit', id='submit-login') Login
        section(id='content') Content here ...
        footer
            p Franziska Becker
            img(src='logo.png')
            p René Warnking
